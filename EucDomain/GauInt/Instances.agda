-- Instances of Gaussian integers.

{-# OPTIONS --without-K --safe  #-}

module GauInt.Instances where

open import Data.Integer using (+_ ; -[1+_] ; +[1+_])
open import Data.Nat using (suc )

open import Instances
open import GauInt.Base renaming (-_ to -ùîæ_ ; _-_ to _-ùîæ_ ; _+_ to _+ùîæ_ ; _*_ to _*ùîæ_ ; NonZero to NonZeroùîæ ; rank to rankùîæ)

-- Instances to overload operations.
instance
  srùîæ : SemiRing ùîæ
  _+_ {{srùîæ}} = _+ùîæ_
  _*_ {{srùîæ}} = _*ùîæ_
  0# {{srùîæ}} = 0ùîæ
  1# {{srùîæ}} = 1ùîæ

instance
  ringùîæ : Ring ùîæ 
  ringùîæ .sra = srùîæ
  ringùîæ .-_ = -ùîæ_

instance
  Rankùîæ : Rank ùîæ
  Rankùîæ .rank = rankùîæ

-- This depends on how the boolean equality on ùîæ is defined. To be
-- precise, it depends on the order of comparing the components.
instance
  nzp : ‚àÄ {n} {y} -> NonZeroùîæ (+ suc n + y i)
  nzp = _

  nzn : ‚àÄ {n} {y} -> NonZeroùîæ (-[1+ n ] + y i)
  nzn = _

  nzpi : ‚àÄ {n} -> NonZeroùîæ (0# + (+ suc n) i)
  nzpi = _

  nzni : ‚àÄ {n} -> NonZeroùîæ (0# + (-[1+ n ]) i)
  nzni = _

instance
  NZTùîæ : NonZeroTypeclass ùîæ
  NZTùîæ .NonZero = NonZeroùîæ 


{-

-- Translation from NonZero predicate to non-equality.
test-t : ‚àÄ (x : ùîæ) -> .{{NonZero x}} -> ¬¨ x ‚â° 0#
test-t (+_ zero + +[1+ n ] i) = Œª {()}
test-t (+_ zero + -[1+_] n i) = Œª {()}
test-t (+[1+ n ] + x‚ÇÅ i) = Œª {()}
test-t (-[1+_] n + x‚ÇÅ i) = Œª {()}


open import Relation.Binary.Structures 
open IsDecEquivalence {{...}}
open IsDecTotalOrder {{...}}
open import Data.Nat.Instances
open import Data.Integer.Instances
test : {!!} 
test = 0‚Ñ§ ‚â§? 0‚Ñ§

-}
