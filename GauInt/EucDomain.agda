-- We show Gausssian Integers forms an Euclidean domain. The proofs
-- are straightforward.

{-# OPTIONS --without-K --safe #-}

module GauInt.EucDomain where

-- imports from local.

-- Hiding the usual div and mod function. We will the new instance in
-- Integer.EucDomain2
import Instances hiding (DM‚Ñ§)
open Instances

open import Integer.EucDomain2
  renaming (div' to div‚Ñ§ ; mod' to mod‚Ñ§ ; euc-eq' to euc-eq‚Ñ§ ; euc-rank' to euc-rank‚Ñ§)
open import Integer.Properties

open import GauInt.Base
  using (ùîæ ; _+_i ; _·∂ú ; Re ; Im ; _+0i ; _+0i' ; 0ùîæ ; 1ùîæ)
open import GauInt.Properties
open import GauInt.Instances


-- imports from stdlib and Agda. 
open import Relation.Nullary using (yes ; no ; ¬¨_)
open import Relation.Binary.PropositionalEquality 

open import Data.Product as P using (_√ó_ ; _,_ ; proj‚ÇÅ ; proj‚ÇÇ)
open import Data.Sum as S renaming ([_,_]‚Ä≤ to ‚äé-elim)

open import Data.Nat as Nat using (‚Ñï ; suc ; zero ; z‚â§n)
import Data.Nat.Properties as NatP
open import Data.Integer as Int
  using (0‚Ñ§ ; +0 ; +_ ; _‚â•_ ; +‚â§+ ; +[1+_] ; -[1+_] ; ‚Ñ§ ; ‚à£_‚à£)
import Data.Integer.Properties as IntP

import Data.Nat.Solver as NS
import Data.Integer.Solver as IS
import GauInt.Solver as GS
open import Algebra.Properties.Ring +-*-ring
open import Algebra.Definitions (_‚â°_ {A = ùîæ}) using (AlmostLeftCancellative)

open import Function.Base using (_$_)

-- ----------------------------------------------------------------------
-- Euclidean Structure on ùîæ

-- As explained in the imports part, we will use the div and mod
-- function defined in Integer.EucDomain2.


-- A special case when the divisor is a positive natural number. The proof:
-- Let x = a + b i, and y = d. By integer euc-eq and euc-rank we have
-- step-a : a = ra + qa * d, with rank ra ‚â§ d / 2.
-- step-b : b = rb + qb * d, with rank rb ‚â§ d / 2.
-- We let q = qa + qb i, r = ra + rb i. Easy to check that
-- eq : x = r + q y. Slightly harder to check
-- le : rank r ‚â§ d / 2 (see below).

div' : ùîæ -> (d : ‚Ñï) -> ¬¨ d ‚â° 0# -> ùîæ
div' n zero n0 with n0 refl
... | ()
div' (a + b i) d@(suc e) n0 = qa + qb i
  where
    qa = a / + d
    qb = b / + d    

mod' : ùîæ -> (d : ‚Ñï) -> ¬¨ d ‚â° 0# -> ùîæ
mod' n zero n0 with n0 refl
... | ()
mod' (a + b i) d@(suc e) n0 = ra + rb i
  where
    ra = a % + d
    rb = b % + d    

div : (x y : ùîæ) -> ¬¨ y ‚â° 0# -> ùîæ
div x y n0 = div' (x * y ·∂ú) y*y·∂ú n0'
  where
    y*y·∂ú : ‚Ñï
    y*y·∂ú = rank y

    n0' :  ¬¨ rank y ‚â° 0#
    n0' = y‚â†0#‚áírank‚â†0 n0

mod : (x y : ùîæ) -> ¬¨ y ‚â° 0# -> ùîæ
mod x y n0 = (x - q * y)
  where
    q = div x y n0


-- ----------------------------------------------------------------------
-- euc-eq and euc-rank property for div' and mod'

-- Dividend = reminder + quotient * divisor.
euc-eq' : ‚àÄ (x : ùîæ) (d : ‚Ñï) (n0 : ¬¨ d ‚â° 0) ->
             let r = mod' x d n0 in let q = div' x d n0 in 
             x ‚â° r + q * (d +0i) 
euc-eq' n zero n0 with n0 refl
... | ()
euc-eq' x@(a + b i) d@(suc e) n0 = eq
  where
    -- setting up q and r.
    n0' : ¬¨ + d ‚â° 0#
    n0' p = n0 (IntP.+-injective p)
    
    qa = a / + d
    qb = b / + d
    ra = a % + d
    rb = b % + d

    ea : a ‚â° ra + qa * + d 
    ea = euc-eq‚Ñ§ a (+ d) n0'
    eb : b ‚â° rb + qb * + d 
    eb = euc-eq‚Ñ§ b (+ d) n0'

    q : ùîæ
    q = qa + qb i  

    r : ùîæ
    r = ra + rb i  

    -- Inject natural number d to Gaussian integer.
    y = d +0i

    -- Proving x = r + q * y.
    eq : x ‚â° r + q * y
    eq = begin
        x ‚â°‚ü® refl ‚ü© 
        a + b i ‚â°‚ü® cong (Œª x -> x + b i) ea ‚ü© 
        (ra + qa * (+ d)) + b i ‚â°‚ü® cong (Œª x -> (ra + qa * (+ d)) + x i) eb ‚ü© 
        (ra + qa * (+ d)) + (rb + qb * (+ d)) i ‚â°‚ü® refl ‚ü© 
        (ra + rb i) + ((qa * (+ d)) + (qb * (+ d)) i) ‚â°‚ü® cong (Œª x ‚Üí (ra + rb i) + ((qa * (+ d)) + x i)) ((solve 3 (Œª qa d qb ‚Üí qb :* d := qa :* con 0‚Ñ§ :+ qb :* d) refl) qa (+ d) qb) ‚ü©
        (ra + rb i) + ((qa * (+ d)) + (qa * 0‚Ñ§ + qb * (+ d)) i) ‚â°‚ü® cong (Œª x ‚Üí (ra + rb i) + (x + (qa * 0‚Ñ§ + qb * (+ d)) i)) ((solve 3 (Œª qa d qb ‚Üí qa :* d := qa :* d :- qb :* con 0‚Ñ§) refl) qa (+ d) qb) ‚ü© 
        (ra + rb i) + ((qa * (+ d) - qb * 0‚Ñ§) + (qa * 0‚Ñ§ + qb * (+ d)) i) ‚â°‚ü® refl ‚ü© 
        (ra + rb i) + (qa + qb i) * y ‚â°‚ü® refl ‚ü© 
        r + q * y ‚àé
          where
            open IS.+-*-Solver
            open ‚â°-Reasoning


-- rank r < rank (inj d)
euc-rank' : ‚àÄ (x : ùîæ) (d : ‚Ñï) (n0 : ¬¨ d ‚â° 0) ->
             let r = mod' x d n0 in let q = div' x d n0 in 
             rank r < rank (d +0i) 
euc-rank' n zero n0 with n0 refl
... | ()
euc-rank' x@(a + b i) d@(suc e) n0 = le
  where
    -- setting up q and r.
    n0' : ¬¨ + d ‚â° 0#
    n0' p = n0 (IntP.+-injective p)
  
    r : ùîæ 
    r = mod' x d n0
    ra = Re r
    rb = Im r

    q : ùîæ 
    q = div' x d n0
    qa = Re q
    qb = Im q

    lea : ‚à£ ra ‚à£ ‚â§ d / 2
    lea = euc-rank‚Ñ§ a (+ d) n0'

    leb : ‚à£ rb ‚à£ ‚â§ d / 2
    leb = euc-rank‚Ñ§ b (+ d) n0'

    y = d +0i
    
    -- Proving rank r < rank y. 
    -- Some auxillary lemmas. 
    lem1 : ‚àÄ {d : ‚Ñï} -> d / 2 + d / 2 ‚â§ d
    lem1 {d} = begin
      d / 2 + d / 2  ‚â°‚ü® solve 1 (Œª x ‚Üí x :+ x := x :* con 2) refl (d / 2) ‚ü©
      d / 2 * 2      ‚â§‚ü® NatP.m‚â§n+m (d / 2 * 2) (d % 2) ‚ü©
      d % 2 + d / 2 * 2  ‚â°‚ü® (sym $ NatESR.euc-eq d 2 (Œª ())) ‚ü©
      d  ‚àé
        where
          open NatP.‚â§-Reasoning
          open NS.+-*-Solver

    lem2 : ‚àÄ {d : Nat.‚Ñï} -> d / 2 ‚â§ d
    lem2 {d} = begin
      d / 2  ‚â§‚ü® NatP.m‚â§n+m (d / 2) (d / 2) ‚ü©
      d / 2 + d / 2      ‚â§‚ü® lem1 {d} ‚ü©
      d  ‚àé
        where
          open NatP.‚â§-Reasoning
          open NS.+-*-Solver

    lem2-strict : ‚àÄ {d : Nat.‚Ñï} .{{_ : NonZero d}} -> (d / 2) < d
    lem2-strict {x@(suc d)} with x / 2 Nat.‚âü 0
    ... | no ¬¨p = begin-strict
      x / 2  <‚ü® NatP.m<n+m (x / 2) x/2>0 ‚ü©
      x / 2 + x / 2      ‚â§‚ü® lem1 {x} ‚ü©
      x  ‚àé
      where
        open NatP.‚â§-Reasoning
        open NS.+-*-Solver
        open import Relation.Binary.Definitions
        open import Data.Empty

        x/2>0 : 0 < (x / 2)
        x/2>0 with NatP.<-cmp 0 (x / 2)
        ... | tri< a ¬¨b ¬¨c = a
        ... | tri‚âà ¬¨a b ¬¨c = ‚ä•-elim (¬¨p (sym b))
    ... | yes p rewrite p = Nat.s‚â§s Nat.z‚â§n


    lem3 : rank y ‚â° d * d
    lem3 = begin
      rank y ‚â°‚ü® refl ‚ü© 
      ‚à£ (+ d) * (+ d) + 0‚Ñ§ * 0‚Ñ§ ‚à£  ‚â°‚ü® cong ‚à£_‚à£ (solve 1 (Œª x ‚Üí x :* x :+ con 0‚Ñ§ :* con 0‚Ñ§ := x :* x) refl (+ d)) ‚ü© 
      ‚à£ (+ d) * (+ d) ‚à£     ‚â°‚ü® IntP.abs-*-commute (+ d) (+ d) ‚ü© 
      ‚à£ (+ d) ‚à£ * ‚à£ (+ d) ‚à£     ‚â°‚ü® refl ‚ü© 
      d * d  ‚àé
        where
          open IS.+-*-Solver
          open ‚â°-Reasoning

    -- The proof idea:
    -- rank r = ‚à£ ra * ra + rb * rb ‚à£ = ‚à£ ra ‚à£ * ‚à£ ra ‚à£ + ‚à£ rb ‚à£ * ‚à£ rb ‚à£
    -- ‚â§ d / 2 * d / 2 + d / 2 * d / 2 by the integer divmod property.
    -- ‚â§ d * d
    -- = rank y

    le : rank r < rank y
    le = begin-strict
      rank r                ‚â°‚ü® refl ‚ü©
      let (sa , sae) = (a*a=+b ra) in let (sb , sbe) = a*a=+b rb in
      ‚à£ ra * ra + rb * rb ‚à£  ‚â°‚ü® tri-eq' ra rb ‚ü© 
      ‚à£ ra * ra ‚à£ + ‚à£ rb * rb ‚à£ ‚â°‚ü® cong‚ÇÇ _+_ (IntP.abs-*-commute ra ra) (IntP.abs-*-commute rb rb) ‚ü©
      ‚à£ ra ‚à£ * ‚à£ ra ‚à£ + ‚à£ rb ‚à£ * ‚à£ rb ‚à£  ‚â§‚ü® NatP.+-mono-‚â§ (NatP.*-mono-‚â§ lea lea) (NatP.*-mono-‚â§ leb leb) ‚ü©
      (d / 2) * (d / 2) + (d / 2) * (d / 2) ‚â°‚ü® solve 1 (Œª x ‚Üí (x :* x) :+ (x :* x) := x :* (x :+ x)) refl (d / 2) ‚ü©
      (d / 2) * ((d / 2) + (d / 2)) ‚â§‚ü® NatP.*-mono ≥-‚â§ (d / 2) lem1 ‚ü© 
      (d / 2) * d <‚ü® NatP.*-monoÀ°-< d (lem2-strict {d}) ‚ü© 
      d * d                ‚â°‚ü® sym lem3 ‚ü©
      rank y  ‚àé
        where
          open NatP.‚â§-Reasoning
          open NS.+-*-Solver
    

-- ----------------------------------------------------------------------
-- euc-eq and euc-rank property for div and mod

-- This is the case when the divisor y = c + d i is an arbitrary
-- non-zero Gaussian integer. Easy to see rank y ·∂ú = rank y = y * y
-- ·∂ú = ‚à£ c * c + d * d ‚à£ ‚â† 0. Notice that by the previous spcial
-- case (when the divisor is a positive natural number) we have

-- eq' : x * y ·∂ú = r' + q' * (y * y ·∂ú), and 
-- le' : rank r' < rank (y * y ·∂ú) = rank y * rank y ·∂ú 
-- (eq') ‚áí r' = x * y ·∂ú - q' * (y * y ·∂ú) = (x - q' * y) * y ·∂ú 
-- ‚áí eqr: rank r' = rank (x - q' * y) * rank y ·∂ú 
-- (le') & (eqr) ‚áí rank (x - q' * y) < rank y since rank y ·∂ú ‚â† 0.

-- So setting q = q', and r = x - q' * y as div and mod functions do,
-- then check the euc-rank property holds. 

-- Dividend = reminder + quotient * divisor.
euc-eq : ‚àÄ (x y : ùîæ) (n0 : ¬¨ y ‚â° 0ùîæ) ->
             let r = mod x y n0 in let q = div x y n0 in 
             x ‚â° r + q * y 
euc-eq x y n0 = claim
  where
    -- Setting up r and q.
    r : ùîæ 
    r = mod x y n0
    q : ùîæ 
    q = div x y n0

    claim : x ‚â° (x - q * y) + q * y 
    claim = begin
      x ‚â°‚ü® solve 2 (\ x qy -> x := (x :- qy) :+ qy) refl x (q * y) ‚ü© 
      (x - q * y) + q * y  ‚àé
      where
        open GS.+-*-Solver
        open ‚â°-Reasoning

-- rank r < rank y.
euc-rank : ‚àÄ (x y : ùîæ) (n0 : ¬¨ y ‚â° 0#) ->
             let r = mod x y n0 in let q = div x y n0 in 
             rank r < rank y
euc-rank x y n0 = claim 
  where
    n0' : ¬¨ rank y ‚â° 0#
    n0' = y‚â†0#‚áírank‚â†0 n0
    
    r : ùîæ 
    r = mod x y n0 
    q : ùîæ 
    q = div x y n0

    eq : x ‚â° r + q * y
    eq = euc-eq x y n0

    r' : ùîæ 
    r' = mod' (x * y ·∂ú) (rank y) n0'
    q' : ùîæ 
    q' = div' (x * y ·∂ú) (rank y) n0'

    eq' : x * y ·∂ú ‚â° r' + q' * (rank y +0i)
    eq' = euc-eq' (x * y ·∂ú) (rank y) n0'

    le' : rank r' < rank (rank y +0i) 
    le' = euc-rank' (x * y ·∂ú) (rank y) n0'

    q=q' : q ‚â° q'
    q=q' = refl

    -- eqr : rank r' = rank (x - q' * y) * rank y ·∂ú ---- (3)
    eqr : rank r' ‚â° rank (x - q' * y) * rank (y ·∂ú)
    eqr = begin
      rank r' ‚â°‚ü® cong rank step ‚ü©
      rank ((x - q' * y) * y ·∂ú) ‚â°‚ü® rank-*-commute (x - q * y) (y ·∂ú) ‚ü©
      rank (x - q' * y) * rank (y ·∂ú) ‚àé
        where
          open ‚â°-Reasoning
          step : r' ‚â° (x - q' * y) * y ·∂ú
          step = begin
            r' ‚â°‚ü® solve 2 (Œª r x ‚Üí r := r :+ x :- x) refl r' (q' * (rank y +0i)) ‚ü©
            r' + q' * (rank y +0i) - q' * (rank y +0i) ‚â°‚ü® cong (_- q' * (rank y +0i)) (sym eq') ‚ü©
            x * y ·∂ú - q' * (rank y +0i) ‚â°‚ü® cong (Œª z ‚Üí x * y ·∂ú - q' * z) (sym $ y*y·∂ú=rank {y}) ‚ü©
            x * y ·∂ú - q' * (y * y ·∂ú) ‚â°‚ü® solve 4 (\ x yc q y -> x :* yc :- q :* ( y :* yc) := (x :- q :* y) :* yc) refl x (y ·∂ú) q' y ‚ü©
            (x - q' * y) * y ·∂ú ‚àé
              where
                open GS.+-*-Solver
                open ‚â°-Reasoning

    -- (le') & (eqr) ‚áí rank (x - q' * y) < rank y since rank y ·∂ú ‚â† 0.
    claim : rank (x - q' * y) < rank y
    claim = NatP.*-cancel ≥-< {rank (y ·∂ú)} (rank (x - q * y)) (rank y) eqr'
      where
        eqr' : rank (x - q' * y) * rank (y ·∂ú) < rank y * rank (y ·∂ú)
        eqr' = begin-strict
            rank (x - q' * y) * rank (y ·∂ú) ‚â°‚ü® sym eqr ‚ü© 
            rank r' <‚ü® le' ‚ü©
            rank (rank y +0i) ‚â°‚ü® cong rank (sym $ y*y·∂ú=rank {y}) ‚ü© 
            rank (y * y ·∂ú) ‚â°‚ü® rank-*-commute y (y ·∂ú) ‚ü© 
            rank y * rank (y ·∂ú) ‚àé
              where
                open GS.+-*-Solver
                open NatP.‚â§-Reasoning


-- ----------------------------------------------------------------------
-- ùîæ is an Euclidean Domain.

import EuclideanDomain
open   EuclideanDomain.Structures (_‚â°_ {A = ùîæ}) using (IsEuclideanDomain)
open   EuclideanDomain.Bundles using (EuclideanDomainBundle)

+-*-isEuclideanDomain : IsEuclideanDomain _+_ _*_ -_ 0ùîæ 1ùîæ
+-*-isEuclideanDomain = record
                              { isCommutativeRing = +-*-isCommutativeRing 
                              ; *-alc = *-alc-ùîæ 
                              ; div = div 
                              ; mod = mod 
                              ; rank = rank 
                              ; euc-eq = euc-eq 
                              ; euc-rank = euc-rank 
                              }


-- Bundle.
+-*-euclideanDomain : EuclideanDomainBundle _ _
+-*-euclideanDomain = record
  { isEuclideanDomain = +-*-isEuclideanDomain'
  }


-- ----------------------------------------------------------------------
-- Making ùîæ an DivMod instance, overloading div and mod.

-- Translation between two nonzeros.
nzùîæ : ‚àÄ (x : ùîæ) -> .{{NonZero x}} -> ¬¨ x ‚â° 0#
nzùîæ (+_ zero + +[1+ n ] i) {{n0}} i0 with i0 
... | ()


instance
  g-divmod : DivMod ùîæ
  DivMod.NZT g-divmod = NZTùîæ
  (g-divmod DivMod./ n) d = div n d (nzùîæ d)
  (g-divmod DivMod.% n) d = mod n d (nzùîæ d)
