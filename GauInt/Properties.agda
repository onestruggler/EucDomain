-- This file gives the definition of Gaussian Integers, the addition
-- and multiplication on them, and shows that they form a commutative
-- ring, and other properties. All the proofs are straightforward.

{-# OPTIONS --without-K --safe  #-}

module GauInt.Properties where

-- imports from local.
open import GauInt.Instances
open import Instances
open import GauInt.Base using (ùîæ ; _+_i ; _·∂ú ; Re ; Im ; _+0i ; _+0i')
open import Integer.Properties

-- imports from stdlib and Agda.
open import Level using (0‚Ñì)
open import Relation.Nullary using (yes; no; ¬¨_)
open import Relation.Binary using (DecidableEquality ; Setoid ; DecSetoid)
open import Relation.Binary.PropositionalEquality
open ‚â°-Reasoning

open import Data.Product using (proj‚ÇÅ; proj‚ÇÇ; _,_)
open import Data.Nat as Nat using (‚Ñï; suc; zero)
import Data.Nat.Properties as NatP
open import Data.Integer.Properties as IntP
  using (+-assoc ; +-identityÀ° ; +-identity ≥ ; *-identityÀ° ; +-inverseÀ° ; +-inverse ≥ ; +-comm ; 0‚â§i‚áí+‚à£i‚à£‚â°i ; +-mono-‚â§ ; +-mono-<-‚â§ ; +-mono-‚â§-<)
open import Data.Integer as Int
  using (‚Ñ§ ; +_ ; NonNegative ; -[1+_] ; +[1+_] ; +‚â§+ ; +<+ ; ‚à£_‚à£ ; 0‚Ñ§)
import Data.Integer.Solver as IS
open IS.+-*-Solver


open import Algebra.Bundles as B
import Algebra.Morphism as Morphism
open import Algebra.Structures {A = ùîæ} _‚â°_
open import Function.Base using (_$_)

module ùîæto‚Ñï = Morphism.Definitions ùîæ ‚Ñï _‚â°_
module ‚Ñïtoùîæ = Morphism.Definitions ‚Ñï ùîæ _‚â°_

-- ----------------------------------------------------------------------
-- Equality

-- Injections are injective.
+0i'-injective : ‚àÄ {a b} -> a +0i' ‚â° b +0i' ‚Üí a ‚â° b
+0i'-injective refl = refl

+0i-injective : ‚àÄ {m n} -> m +0i ‚â° n +0i ‚Üí m ‚â° n
+0i-injective refl = refl

-- Decidable equality on ùîæ.
infix 4 _‚âü_
_‚âü_ : DecidableEquality ùîæ
_‚âü_ x@(a + b i) y@(c + d i) with  a Int.‚âü c | b Int.‚âü d
... | yes p  | yes q = yes (cong‚ÇÇ _+_i p q)
... | yes p  | no ¬¨q = no (Œª { refl ‚Üí ¬¨q refl})
... | no ¬¨p  | hyp = no (Œª { refl ‚Üí ¬¨p refl})


‚â°-setoid : Setoid 0‚Ñì 0‚Ñì
‚â°-setoid = setoid ùîæ

‚â°-decSetoid : DecSetoid 0‚Ñì 0‚Ñì
‚â°-decSetoid = decSetoid _‚âü_


-- ----------------------------------------------------------------------
-- Properties of _+_

-- Associativity of addition. 
assoc-+ : ‚àÄ (x y z : ùîæ) -> ((x + y) + z) ‚â° (x + (y + z))
assoc-+ x@(a + b i) y@(c + d i) z@(e + f i) = begin
  (((a + b i) + (c + d i)) + (e + f i)) ‚â°‚ü® refl ‚ü©
  ((a + c + e) + (b + d + f) i) ‚â°‚ü® cong‚ÇÇ _+_i (+-assoc a c e) (+-assoc b d f) ‚ü©
  ((a + (c + e)) + (b + (d + f)) i) ‚â°‚ü® refl ‚ü©
  (x + (y + z)) ‚àé

-- Left additive identity.
leftId-+ : ‚àÄ (x : ùîæ) -> 0# + x ‚â° x
leftId-+ x@(a + b i) = begin
  (0# + 0# i) + (a + b i) ‚â°‚ü® refl ‚ü©
  -- cannot parse if remove the outer layer parenthese.
  ((0# + a) + (0# + b) i) ‚â°‚ü® cong‚ÇÇ  _+_i (+-identityÀ° a) (+-identityÀ° b) ‚ü©
  (a + b i) ‚àé   

-- Right additive identity.
rightId-+ : ‚àÄ (x : ùîæ) -> (x + 0#) ‚â° x
rightId-+ x@(a + b i) = begin
  (a + b i) + (0# + 0# i)  ‚â°‚ü® refl ‚ü©
  ((a + 0#) + (b + 0#) i) ‚â°‚ü® cong‚ÇÇ  _+_i (+-identity ≥ a) (+-identity ≥ b) ‚ü©
  (a + b i) ‚àé   

-- Left additive inverse. 
leftInv-+ : ‚àÄ (x : ùîæ) -> (- x) + x ‚â° 0#
leftInv-+ x@(a + b i) = cong‚ÇÇ _+_i (+-inverseÀ° a) (+-inverseÀ° b) 

-- Right additive inverse. 
rightInv-+ : ‚àÄ (x : ùîæ) -> x + (- x) ‚â° 0#
rightInv-+ x@(a + b i) = cong‚ÇÇ _+_i (+-inverse ≥ a) (+-inverse ≥ b)

-- Addition is commutative. 
comm-+ : (x y : ùîæ) ‚Üí (x + y) ‚â° (y + x)
comm-+ x@(a + b i) y@(c + d i) = cong‚ÇÇ _+_i (+-comm a c) (+-comm b d) 

-- ----------------------------------------------------------------------
-- Structures for addition 

+-isMagma : IsMagma _+_
+-isMagma = record
  { isEquivalence = isEquivalence
  ; ‚àô-cong        = cong‚ÇÇ _+_
  }

+-isSemigroup : IsSemigroup _+_
+-isSemigroup = record
  { isMagma = +-isMagma
  ; assoc   = assoc-+
  }

+-isCommutativeSemigroup : IsCommutativeSemigroup _+_
+-isCommutativeSemigroup = record
  { isSemigroup = +-isSemigroup
  ; comm        = comm-+
  }

+-0-isMonoid : IsMonoid _+_ 0#
+-0-isMonoid = record
  { isSemigroup = +-isSemigroup
  ; identity    = leftId-+ , rightId-+ 
  }

+-0-isCommutativeMonoid : IsCommutativeMonoid _+_ 0#
+-0-isCommutativeMonoid = record
  { isMonoid = +-0-isMonoid
  ; comm     = comm-+
  }

+-0-isGroup : IsGroup _+_ 0# (-_)
+-0-isGroup = record
  { isMonoid = +-0-isMonoid
  ; inverse  = leftInv-+ , rightInv-+ 
  ; ‚Åª¬π-cong  = cong (-_)
  }

+-isAbelianGroup : IsAbelianGroup _+_ 0# (-_)
+-isAbelianGroup = record
  { isGroup = +-0-isGroup
  ; comm    = comm-+
  }

-- ----------------------------------------------------------------------
-- Bundles for addition 

+-magma : Magma 0‚Ñì 0‚Ñì
+-magma = record
  { isMagma = +-isMagma
  }

+-semigroup : Semigroup 0‚Ñì 0‚Ñì
+-semigroup = record
  { isSemigroup = +-isSemigroup
  }

+-commutativeSemigroup : CommutativeSemigroup 0‚Ñì 0‚Ñì
+-commutativeSemigroup = record
  { isCommutativeSemigroup = +-isCommutativeSemigroup
  }

+-0-monoid : Monoid 0‚Ñì 0‚Ñì
+-0-monoid = record
  { isMonoid = +-0-isMonoid
  }

+-0-commutativeMonoid : CommutativeMonoid 0‚Ñì 0‚Ñì
+-0-commutativeMonoid = record
  { isCommutativeMonoid = +-0-isCommutativeMonoid
  }

+-0-abelianGroup : AbelianGroup 0‚Ñì 0‚Ñì
+-0-abelianGroup = record
  { isAbelianGroup = +-isAbelianGroup
  }


-- ----------------------------------------------------------------------
-- Properties of multiplication 

-- Associativity of multiplication.
assoc-* : ‚àÄ (x y z : ùîæ) -> ((x * y) * z) ‚â° (x * (y * z))
assoc-* x@(a + b i) y@(c + d i) z@(e + f i) = begin
  (((a + b i) * (c + d i)) * (e + f i)) ‚â°‚ü® refl ‚ü©
  ((a * c - b * d) + (a * d + b * c) i)  * (e + f i) ‚â°‚ü® refl ‚ü©
  ((a * c - b * d) * e - (a * d + b * c) * f) + ((a * c - b * d) * f + (a * d + b * c) * e) i ‚â°‚ü® cong‚ÇÇ _+_i (let _*_ = _:*_ in let _+_ = _:+_ in let _-_ = _:-_ in (solve 6 (\ a b c d e f -> (((a * c) - (b * d)) * e) - (((a * d) + (b * c)) * f) := (a * ((c * e) - (d * f))) - (b * ((c * f) + (d * e)))) refl a b c d e f)) ((let _*_ = _:*_ in let _+_ = _:+_ in let _-_ = _:-_ in
   (solve 6 (\ a b c d e f -> (((a * c) - (b * d)) * f) + (((a * d) + (b * c)) * e) := (a * ((c * f) + (d * e))) + (b * ((c * e) - (d * f)))) refl a b c d e f))) ‚ü©
  ((a * (c * e - d * f) - b * (c * f + d * e) ) + (a * (c * f + d * e) + b * (c * e - d * f)) i ) ‚â°‚ü® refl ‚ü©
  ((a + b i) * ((c * e - d * f) + (c * f + d * e) i) ) ‚â°‚ü® refl ‚ü©
  (x * (y * z)) ‚àé 

-- Left multiplicative identity.
leftId-* : ‚àÄ (x : ùîæ) -> (1# * x) ‚â° x
leftId-* x@(a + b i) = begin
  (1# + 0# i) * (a + b i) ‚â°‚ü® refl ‚ü©
  ((1# * a - 0# * b) + (1# * b + 0# * a) i) ‚â°‚ü® cong‚ÇÇ _+_i (let _*_ = _:*_ in let _-_ = _:-_ in (solve 2 (\ a b -> (con 1# * a) - (con 0# * b) := con 1# * a) refl a b)) ( (let _*_ = _:*_ in let _+_ = _:+_ in (solve 2 (\ a b -> (con 1# * b) + (con 0# * a) := con 1# * b) refl a b)))  ‚ü©
  ((1# * a) + (1# * b) i) ‚â°‚ü® cong‚ÇÇ _+_i (*-identityÀ° a) (*-identityÀ° b)  ‚ü©
  (a + b i) ‚àé  

-- Right multiplicative identity.
rightId-* : ‚àÄ (x : ùîæ) -> (x * 1#) ‚â° x
rightId-* x@(a + b i) = begin
  (a + b i) * (1# + 0# i)  ‚â°‚ü® refl ‚ü©
  (( a * 1# - b * 0#) + ( a * 0#  + b * 1# ) i) ‚â°‚ü® cong‚ÇÇ _+_i ((let _*_ = _:*_ in let _-_ = _:-_ in (solve 2 (\ a b -> (a * con 1# ) - (b * con 0# ) := con 1# * a) refl a b))) ((let _*_ = _:*_ in let _+_ = _:+_ in (solve 2 (\ a b -> (a * con 0#) + (b * con 1# )   := con 1# * b) refl a b)))   ‚ü©
  ((1# * a) + (1# * b) i) ‚â°‚ü® cong‚ÇÇ _+_i (*-identityÀ° a) (*-identityÀ° b)  ‚ü©
  (a + b i) ‚àé   

-- Zero leftly times any number is zero. 
leftZero : ‚àÄ x -> (0# + 0# i) * x ‚â° (0# + 0# i)
leftZero x@(a + b i)  = begin
  (0# + 0# i) * (a + b i) ‚â°‚ü® refl ‚ü©
  (0#  * a - 0#  * b) +   (0#  * a - 0#  * b) i  ‚â°‚ü® refl ‚ü©
  0# + 0# i ‚àé   

-- Zero rightly times any number is zero. 
rightZero : ‚àÄ x -> x * (0# + 0# i) ‚â° (0# + 0# i)
rightZero x@(a + b i)  = begin
  (a + b i) * (0# + 0# i)  ‚â°‚ü® refl  ‚ü©
  (a * 0#  - b * 0# ) + (a * 0#  + b *  0# ) i  ‚â°‚ü® cong‚ÇÇ _+_i ((let _*_ = _:*_ in let _+_ = _:+_ in let _-_ = _:-_ in  (solve 2 (\ a b -> (a * con 0#) - (b * con 0# ) := con 0#) refl a b))) ((let _*_ = _:*_ in let _+_ = _:+_ in let _-_ = _:-_ in  (solve 2 (\ a b -> (a * con 0#) + (b * con 0# ) := con 0#) refl a b)))   ‚ü©
  0# + 0# i ‚àé   

-- Left multiplication is distributive over addition. 
*-DistributesOver-+À° : ‚àÄ (x y z : ùîæ) -> (x * (y + z)) ‚â° ((x * y) + (x * z))
*-DistributesOver-+À° x@(a + b i) y@(c + d i) z@(e + f i) = begin
  x * (y + z) ‚â°‚ü® refl ‚ü©
  (a * (c + e) - b * (d + f) + (a * (d + f) + b * (c + e)) i) ‚â°‚ü® cong‚ÇÇ _+_i ((let _*_ = _:*_ in let _+_ = _:+_ in let _-_ = _:-_ in (solve 6 (\ a b c d e f -> (a * (c + e)) - (b * (d + f) ) := ((a * c) - (b * d)) + ((a * e) - (b * f)) ) refl a b c d e f))) ((let _*_ = _:*_ in let _+_ = _:+_ in let _-_ = _:-_ in (solve 6 (\ a b c d e f -> (a * (d + f)) + (b * (c + e) ) := ((a * d) + (b * c)) + ((a * f) + (b * e)) ) refl a b c d e f))) ‚ü©
  ((a * c - b * d)  + (a * e - b * f)) + ((a * d + b * c) + (a * f + b * e)) i ‚â°‚ü® refl ‚ü© 
  ((x * y) + (x * z)) ‚àé  

-- Right multiplication is distributive over addition. 
*-DistributesOver-+ ≥ : ‚àÄ (x y z : ùîæ) -> ((y + z) * x) ‚â° (y * x) + (z * x)
*-DistributesOver-+ ≥ x@(a + b i) y@(c + d i) z@(e + f i) = begin
  (y + z) * x ‚â°‚ü® refl ‚ü©
  ((c + e) * a - (d + f) * b + ( (c + e) * b + (d + f) * a ) i) ‚â°‚ü® cong‚ÇÇ _+_i ((let _*_ = _:*_ in let _+_ = _:+_ in let _-_ = _:-_ in (solve 6 (\ a b c d e f -> ((c + e) * a) - ((d + f) * b ) := ((c * a ) - (d * b)) + ((e * a) - (f * b )) ) refl a b c d e f))) ((let _*_ = _:*_ in let _+_ = _:+_ in let _-_ = _:-_ in (solve 6 (\ a b c d e f -> ((c + e) * b) + ((d + f) * a ) := ((c * b ) + (d * a)) + ((e * b) + (f * a )) ) refl a b c d e f)))  ‚ü©
  ((c * a - d * b)  + (e * a - f * b)) + ((c * b + d * a ) + (e * b + f * a )) i ‚â°‚ü® refl ‚ü© 
  ((y * x) + (z * x)) ‚àé  


-- Multiplicaton is commutative. 
comm-* : ‚àÄ (x y : ùîæ) -> x * y ‚â° y * x
comm-* x@(a + b i) y@(c + d i) = begin
  x * y ‚â°‚ü® refl ‚ü©
  (a * c - b * d) + (a * d + b * c) i ‚â°‚ü® cong‚ÇÇ _+_i ((let _*_ = _:*_ in let _+_ = _:+_ in let _-_ = _:-_ in (solve 4 (\ a b c d -> (a * c) - (b * d) := (c * a ) - (d * b)) refl a b c d))) ((let _*_ = _:*_ in let _+_ = _:+_ in let _-_ = _:-_ in  (solve 4 (\ a b c d -> (a * d) + (b * c) := (c * b) + (d * a)) refl a b c d)))  ‚ü©
  (c * a - d * b) + (c * b + d * a) i ‚â°‚ü® refl ‚ü© 
  (y * x) ‚àé  


-- ----------------------------------------------------------------------
-- Structures for multiplication

*-isMagma : IsMagma _*_
*-isMagma = record
  { isEquivalence = isEquivalence
  ; ‚àô-cong        = cong‚ÇÇ _*_
  }

*-isSemigroup : IsSemigroup _*_
*-isSemigroup = record
  { isMagma = *-isMagma
  ; assoc   = assoc-*
  }

*-isCommutativeSemigroup : IsCommutativeSemigroup _*_
*-isCommutativeSemigroup = record
  { isSemigroup = *-isSemigroup
  ; comm        = comm-*
  }

*-1-isMonoid : IsMonoid _*_ 1#
*-1-isMonoid = record
  { isSemigroup = *-isSemigroup
  ; identity    = leftId-* , rightId-* 
  }

*-1-isCommutativeMonoid : IsCommutativeMonoid _*_ 1#
*-1-isCommutativeMonoid = record
  { isMonoid = *-1-isMonoid
  ; comm     = comm-*
  }

-- ----------------------------------------------------------------------
-- Structures for multiplication and addition

+-*-isSemiring : IsSemiring _+_ _*_ 0# 1#
+-*-isSemiring = record
  { isSemiringWithoutAnnihilatingZero = record
    { +-isCommutativeMonoid = +-0-isCommutativeMonoid
    ; *-isMonoid = *-1-isMonoid
    ; distrib = *-DistributesOver-+À° , *-DistributesOver-+ ≥ 
    }
  ; zero = leftZero , rightZero 
  }

+-*-isCommutativeSemiring : IsCommutativeSemiring _+_ _*_ 0# 1#
+-*-isCommutativeSemiring = record
  { isSemiring = +-*-isSemiring
  ; *-comm = comm-*
  }

+-*-isRing : IsRing _+_ _*_ -_ 0# 1#
+-*-isRing = record
  { +-isAbelianGroup = +-isAbelianGroup
  ; *-isMonoid       = *-1-isMonoid
  ; distrib          = *-DistributesOver-+À° , *-DistributesOver-+ ≥
  ; zero             = leftZero , rightZero
  }

+-*-isCommutativeRing : IsCommutativeRing _+_ _*_ -_ 0# 1#
+-*-isCommutativeRing = record
  { isRing = +-*-isRing
  ; *-comm = comm-*
  }

------------------------------------------------------------------------
-- Bundles for multiplication 

*-magma : Magma 0‚Ñì 0‚Ñì
*-magma = record
  { isMagma = *-isMagma
  }

*-semigroup : Semigroup 0‚Ñì 0‚Ñì
*-semigroup = record
  { isSemigroup = *-isSemigroup
  }

*-commutativeSemigroup : CommutativeSemigroup 0‚Ñì 0‚Ñì
*-commutativeSemigroup = record
  { isCommutativeSemigroup = *-isCommutativeSemigroup
  }

*-1-monoid : Monoid 0‚Ñì 0‚Ñì
*-1-monoid = record
  { isMonoid = *-1-isMonoid
  }

*-1-commutativeMonoid : CommutativeMonoid 0‚Ñì 0‚Ñì
*-1-commutativeMonoid = record
  { isCommutativeMonoid = *-1-isCommutativeMonoid
  }

------------------------------------------------------------------------
-- Bundles for multiplication and addition

+-*-semiring : Semiring 0‚Ñì 0‚Ñì
+-*-semiring = record
  { isSemiring = +-*-isSemiring
  }

+-*-commutativeSemiring : CommutativeSemiring 0‚Ñì 0‚Ñì
+-*-commutativeSemiring = record
  { isCommutativeSemiring = +-*-isCommutativeSemiring
  }

+-*-ring : B.Ring 0‚Ñì 0‚Ñì
+-*-ring = record
  { isRing = +-*-isRing
  }

+-*-commutativeRing : CommutativeRing 0‚Ñì 0‚Ñì
+-*-commutativeRing = record
  { isCommutativeRing = +-*-isCommutativeRing
  }


-- ----------------------------------------------------------------------
-- Properties of Re and Im

-- Re x + Im x i = x
Re+Im*i : ‚àÄ {x} -> Re x + Im x i ‚â° x
Re+Im*i {x + x‚ÇÅ i} = refl

-- Re (y * y ·∂ú) ‚â° + rank y 
Re[yy·∂ú]=rank : ‚àÄ {y : ùîæ} -> Re (y * y ·∂ú) ‚â° + rank y 
Re[yy·∂ú]=rank {y@(a + b i)} = sym $ begin
  + (rank y) ‚â°‚ü® refl ‚ü©
  + (rank (a + b i)) ‚â°‚ü® refl ‚ü©
  + ‚à£ a * a + b * b ‚à£ ‚â°‚ü® cong +_ (tri-eq' a b) ‚ü©
  + (‚à£ a * a ‚à£ + ‚à£ b * b ‚à£) ‚â°‚ü® refl ‚ü©
  + ‚à£ a * a ‚à£ + + ‚à£ b * b ‚à£ ‚â°‚ü® cong‚ÇÇ _+_ (+‚à£a*a‚à£=a*a a) (+‚à£a*a‚à£=a*a b) ‚ü©
  a * a + b * b ‚â°‚ü® solve 2 (\ a b -> a :* a :+ b :* b := a :* a :- b :* (:- b)) refl a b ‚ü©
  a * a - b * (- b) ‚â°‚ü® refl ‚ü©
  Re ((a * a - b * (- b)) + 0‚Ñ§ i) ‚â°‚ü® refl ‚ü©
  Re ((a * a - b * (- b)) + (a * (- b) + b * a) i) ‚â°‚ü® refl ‚ü©
  Re (y * y ·∂ú) ‚àé

-- Im y * y ·∂ú = 0
Im[yy·∂ú]=0 : ‚àÄ {y : ùîæ} -> Im (y * y ·∂ú) ‚â° 0#
Im[yy·∂ú]=0 {y@(a + b i)} = begin
  Im (y * y ·∂ú) ‚â°‚ü® refl ‚ü©
  Im ((a * a - b * (- b)) + (a * (- b) + b * a) i) ‚â°‚ü® refl ‚ü©
  a * (- b) + b * a ‚â°‚ü® solve 2 (\ a b -> a :* (:- b) :+ b :* a := con 0#) refl a b ‚ü©
  0# ‚àé


-- ----------------------------------------------------------------------
-- Properties of conjugation

-- Conjugation is injective.
·∂ú-injective : ‚àÄ {x} -> x ·∂ú ‚â° 0# -> x ‚â° 0#
·∂ú-injective {+ 0 + + 0 i} eq = refl

-- y * y ·∂ú = rank y
y*y·∂ú=rank : ‚àÄ {y : ùîæ} -> y * y ·∂ú ‚â° rank y +0i
y*y·∂ú=rank {y@(a + b i)} = begin
  y * y ·∂ú ‚â°‚ü® sym $ Re+Im*i ‚ü©
  Re (y * y ·∂ú) + Im (y * y ·∂ú) i  ‚â°‚ü® cong‚ÇÇ _+_i (Re[yy·∂ú]=rank {y}) (Im[yy·∂ú]=0 {y})  ‚ü©
  + rank y + 0# i ‚àé


-- ----------------------------------------------------------------------
-- Properties of rank

-- rank on ùîæ is homomorphic in multiplication.
rank-*-commute : ùîæto‚Ñï.Homomorphic‚ÇÇ rank _*_ Nat._*_
rank-*-commute x@(a + b i) y@(c + d i) = claim
  where
    claim : rank (x * y) ‚â° rank x * rank y
    claim = begin
      rank (x * y)  ‚â°‚ü® refl ‚ü© 
      rank ((a * c - b * d) + (a * d + b * c) i) ‚â°‚ü® refl ‚ü©
      ‚à£ (a * c - b * d)^2 + (a * d + b * c)^2 ‚à£ ‚â°‚ü® cong ‚à£_‚à£ (solve 4 (Œª a b c d ‚Üí (a :* c :- b :* d) :* (a :* c :- b :* d) :+ (a :* d :+ b :* c) :* (a :* d :+ b :* c) := (a :* a :+ b :* b) :* (c :* c :+ d :* d)) refl a b c d) ‚ü©
      ‚à£ (a ^2 + b ^2) * (c ^2 + d ^2) ‚à£ ‚â°‚ü® IntP.abs-*-commute ((a ^2 + b ^2)) ((c ^2 + d ^2)) ‚ü©
      ‚à£ a ^2 + b ^2 ‚à£ * ‚à£ c ^2 + d ^2 ‚à£ ‚â°‚ü® refl ‚ü©
      rank x * rank y ‚àé

rank=‚à£Re[y*y·∂ú]‚à£ : ‚àÄ (x : ùîæ) -> rank x ‚â° ‚à£ Re (x * x ·∂ú) ‚à£
rank=‚à£Re[y*y·∂ú]‚à£ x@(a + b i) = begin
  rank (a + b i) ‚â°‚ü® refl ‚ü©
  ‚à£ a * a + b * b ‚à£ ‚â°‚ü® cong ‚à£_‚à£ (solve 2 (Œª a b ‚Üí a :* a :+ b :* b := a :* a :- b :* (:- b)) refl a b) ‚ü©
  ‚à£ a * a - b * (- b) ‚à£ ‚â°‚ü® refl ‚ü©
  ‚à£ Re ((a * a - b * (- b)) + 0‚Ñ§ i) ‚à£ ‚â°‚ü® refl ‚ü©
  ‚à£ Re ((a * a - b * (- b)) + (a * (- b) + b * a) i) ‚à£ ‚â°‚ü® refl ‚ü©
  ‚à£ Re (x * x ·∂ú) ‚à£  ‚àé

-- rank y + 0 i = y * y ·∂ú
rank+0i=y*y·∂ú : ‚àÄ {y : ùîæ} -> (rank y) +0i ‚â° y * y ·∂ú 
rank+0i=y*y·∂ú {y} = sym $ begin
  y * y ·∂ú ‚â°‚ü® sym $ Re+Im*i ‚ü©
  Re (y * y ·∂ú) + Im (y * y ·∂ú) i  ‚â°‚ü® cong‚ÇÇ _+_i (Re[yy·∂ú]=rank {y}) (Im[yy·∂ú]=0 {y})  ‚ü©
  + rank y + 0# i ‚àé

-- ----------------------------------------------------------------------
-- Injection preserves SemiRing Structure

+0i-+-commute : ‚Ñïtoùîæ.Homomorphic‚ÇÇ _+0i Nat._+_ _+_
+0i-+-commute a b = refl 

+0i-*-commute : ‚Ñïtoùîæ.Homomorphic‚ÇÇ _+0i Nat._*_ _*_
+0i-*-commute a b rewrite NatP.*-zeroÀ° a | NatP.*-zeroÀ° b | NatP.*-zero ≥ a | NatP.*-zero ≥ b | sym (IntP.pos-distrib-* a b) | IntP.+-identity ≥ (+ a * + b) = refl

0+0i=0 : 0 +0i ‚â° 0#
0+0i=0 = refl 

1+0i=1 : 1 +0i ‚â° 1#
1+0i=1 = refl 


-- ----------------------------------------------------------------------
-- Properties of NonZero




